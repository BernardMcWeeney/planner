---
// src/components/ActiveTasks.astro
const response = await fetch(`${Astro.url.origin}/api/tasks`);
const tasks = response.ok ? await response.json() : [];

function formatDate(dateString: string) {
  if (!dateString) return '';
  return new Date(dateString).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric'
  });
}

function isOverdue(dateString: string) {
  if (!dateString) return false;
  return new Date(dateString) < new Date();
}
---

<div class="bg-white rounded-xl border border-gray-200 overflow-hidden">
  <div class="p-6 border-b border-gray-200">
    <h3 class="text-lg font-semibold text-gray-900">Active Tasks</h3>
    <p class="text-sm text-gray-600 mt-1">Tasks that need your attention</p>
  </div>
  
  <div class="p-6">
    {tasks.length === 0 ? (
      <div class="text-center py-12">
        <div class="bg-gray-100 w-16 h-16 rounded-lg flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <h4 class="text-lg font-medium text-gray-900 mb-2">All caught up!</h4>
        <p class="text-gray-600">No active tasks at the moment.</p>
      </div>
    ) : (
      <div class="space-y-4">
        {tasks.map((task: any) => (
          <div class="flex items-center p-4 rounded-lg border border-gray-200">
            <div class="flex-1 min-w-0">
              <div class="flex items-center space-x-3">
                <h4 class="text-sm font-medium text-gray-900 truncate">
                  {task.title}
                </h4>
                <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                  task.status === 'in_progress' 
                    ? 'bg-blue-100 text-blue-800' 
                    : 'bg-gray-100 text-gray-800'
                }`}>
                  {task.status === 'in_progress' ? 'In Progress' : 'To Do'}
                </span>
              </div>
              
              <div class="flex items-center mt-2 space-x-4 text-xs text-gray-500">
                {task.projects && (
                  <span class="flex items-center">
                    <div 
                      class="w-2 h-2 rounded-full mr-2"
                      style={`background-color: ${task.projects.color}`}
                    ></div>
                    {task.projects.name}
                  </span>
                )}
                
                {task.due_date && (
                  <span class={`flex items-center ${
                    isOverdue(task.due_date) ? 'text-red-600 font-medium' : ''
                  }`}>
                    <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                    {formatDate(task.due_date)}
                  </span>
                )}
                
                {task.priority && task.priority !== 'low' && (
                  <span class={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                    task.priority === 'high' 
                      ? 'bg-red-100 text-red-800'
                      : 'bg-yellow-100 text-yellow-800'
                  }`}>
                    {task.priority === 'high' ? 'High' : 'Medium'}
                  </span>
                )}
              </div>
            </div>
          </div>
        ))}
        
        <div class="pt-4 border-t border-gray-200">
          <a 
            href="/tasks" 
            class="block w-full text-center py-2 text-sm font-medium text-indigo-600 hover:text-indigo-700 transition-colors"
          >
            View all tasks
          </a>
        </div>
      </div>
    )}
  </div>
</div>